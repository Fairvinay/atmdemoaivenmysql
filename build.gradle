plugins {
    id 'application'
    id 'java'
    id 'org.springframework.boot' version '3.2.4'
    id 'io.spring.dependency-management' version '1.1.3'
}

apply plugin: 'java'

group = 'com.example'
version = '0.0.1-SNAPSHOT'

application {
    mainClass = 'com.example.atmdemo.Application'
}
java {
    sourceCompatibility = '17'
   
}

bootJar {
    enabled = true
}

jar {
    enabled = true
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes(
            'Main-Class': application.mainClass
        )
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}
repositories {
  mavenLocal()
  mavenCentral()
  maven {url "https://repo.spring.io/milestone"}
  maven {url "https://repo.spring.io/snapshot"}
}

dependencies {
  implementation (
          'org.springframework.boot:spring-boot-starter-web:3.2.4',
          'com.amazonaws.serverless:aws-serverless-java-container-springboot3:[2.0-SNAPSHOT,)',
  )
   compileOnly ('com.zaxxer:HikariCP:5.0.1') {
		exclude group: 'org.hibernate', module: 'hibernate-core'
	}
    implementation ('org.springframework.boot:spring-boot-starter-data-jpa') {
		exclude group: 'org.apache.tomcat', module: 'tomcat-jdbc'
	}
compileOnly('org.hibernate:hibernate-hikaricp:5.2.11.Final') {
		exclude group: 'com.zaxxer', module: 'HikariCP'
		exclude group: 'org.hibernate', module: 'hibernate-core'
	}
	implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.14.0'
  implementation group: 'org.apache.commons', name: 'commons-collections4', version: '4.5.0-M1'	
  implementation group: 'org.hibernate.common', name: 'hibernate-commons-annotations', version: '6.0.5.Final'
  implementation group: 'com.gitlab.johnjvester', name: 'random-generator', version: '1.9'
  implementation group: 'org.hibernate.validator', name: 'hibernate-validator', version: '6.2.3.Final'
  implementation group: 'com.rollbar', name: 'rollbar-spring6-webmvc', version: '2.0.0'
   implementation group: 'mysql', name: 'mysql-connector-java', version: '8.0.28'
    //runtimeOnly "mysql:mysql-connector-java:8.0.28"
   // implementation 'mysql:mysql-connector-java'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    //runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.1'
    implementation 'com.sun.xml.bind:jaxb-core:4.0.3'
     implementation 'org.glassfish.jaxb:jaxb-runtime:4.0.3'
     implementation 'com.sun.xml.bind:jaxb-impl:4.0.3'
     implementation 'jakarta.activation:jakarta.activation-api:2.1.1'
    
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    compileOnly 'org.springframework.boot:spring-boot-starter-jdbc'
    //implementation 'org.glassfish.jaxb:jaxb-runtime:2.3.2'
//implementation 'jakarta.xml.bind:jakarta.xml.bind-api:2.3.2'
implementation 'net.bytebuddy:byte-buddy:1.12.23'
    implementation("io.jsonwebtoken:jjwt-api:0.11.5")
implementation("io.jsonwebtoken:jjwt-impl:0.11.5")
implementation("io.jsonwebtoken:jjwt-jackson:0.11.5")
  testImplementation("com.amazonaws.serverless:aws-serverless-java-container-core:[2.0-SNAPSHOT,):tests")
  testImplementation("org.apache.httpcomponents.client5:httpclient5:5.2.1")
  testImplementation(platform("org.junit:junit-bom:5.10.2"))
  testImplementation("org.junit.jupiter:junit-jupiter")

}

task buildZip(type: Zip) {
  from compileJava
  from processResources
  into('lib') {
    from(configurations.compileClasspath) {
      exclude 'tomcat-embed-*'
    }
  }
}
tasks.named('bootJar') {
    mainClass = 'com.example.atmdemo.Application'
}
task customFatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'com.example.atmdemo.Application'
    }
    archiveBaseName = 'all-in-one-jar'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}
// FAiled 
//task makeJar(type: Jar) {
//    archiveName = 'app.jar'
//    manifest {
//        attributes 'Main-Class': 'com.example.atmdemo.Application'
//    }
//    with jar
//    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
//}
tasks.named('test') {
    useJUnitPlatform()
}
 allprojects {
    tasks.withType(Test.class) {
        onlyIf {
            System.getProperty("software.amazon.aws.lambdabuilders.scratch-dir") == null || System.getenv("GRADLE_SAM_EXECUTE_TEST") != null
        }
    }
}

build.dependsOn buildZip
